setwd("C:/Users/David/Desktop/Research/GitHub/EM/Real Data/Lung Cancer Cell Line")
source("non-simulation EM.R")
anno<-read.table("NSCLC_anno.txt",sep="\t",header=TRUE)
dat<-read.table("NSCLC_rsem.genes.exp.count.unnormalized.txt",sep="\t",header=TRUE)
row_names<-toupper(dat[,1])
dat<-round(dat[,-1],digits=0)
cts<-as.matrix(dat)
source("C:/Users/David/Desktop/Research/GitHub/EM/non-simulation EM.R")
source("non-simulation EM.R")
source("non-simulation EM.R")
source("C:/Users/David/Desktop/Research/GitHub/EM/non-simulation EM.R")
anno<-read.table("NSCLC_anno.txt",sep="\t",header=TRUE)
dat<-read.table("NSCLC_rsem.genes.exp.count.unnormalized.txt",sep="\t",header=TRUE)
row_names<-toupper(dat[,1])
dat<-round(dat[,-1],digits=0)
cts<-as.matrix(dat)
rownames(cts)<-row_names
colnames(cts)<-toupper(colnames(cts))
coldata<-anno[,-1]
rownames(coldata)<-toupper(anno[,1])
coldata<-coldata[,c("Adeno.Squamous","Tumor.location")]
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
dds<-DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ 1)
DESeq_dds<-DESeq(dds)
size_factors<-sizeFactors(DESeq_dds)
norm_y<-counts(DESeq_dds,normalized=TRUE)
library("stats")
library("data.table")
library("DESeq2")
anno<-read.table("NSCLC_anno.txt",sep="\t",header=TRUE)
dat<-read.table("NSCLC_rsem.genes.exp.count.unnormalized.txt",sep="\t",header=TRUE)
row_names<-toupper(dat[,1])
dat<-round(dat[,-1],digits=0)
cts<-as.matrix(dat)
rownames(cts)<-row_names
colnames(cts)<-toupper(colnames(cts))
coldata<-anno[,-1]
rownames(coldata)<-toupper(anno[,1])
coldata<-coldata[,c("Adeno.Squamous","Tumor.location")]
all(rownames(coldata) %in% colnames(cts))
all(rownames(coldata) == colnames(cts))
dds<-DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ 1)
DESeq_dds<-DESeq(dds)
size_factors<-sizeFactors(DESeq_dds)
norm_y<-counts(DESeq_dds,normalized=TRUE)
dat<-read.table("NSCLC_rsem.genes.exp.count.unnormalized.txt",sep="\t",header=TRUE)
y<-round(dat[,-1],digits=0)
rownames(y)<-dat[,1]
y<-y[(rowSums(y)>=100),]
med_abs_dev<-rep(0,times=nrow(y))
for(j in 1:nrow(y)){
med_abs_dev[j]<-mad(as.numeric(y[j,]),constant=1)
}
y<-cbind(rownames(y),y,med_abs_dev)
subs_y<-as.data.table(y)[order(-med_abs_dev),head(.SD,500)]
genes_y<-subs_y[,1]
subs_y<-subs_y[,-1]
subs_y<-as.data.frame(subs_y[,-24])
K_search=2
lambda1_search=seq(from=1,to=21,by=2)
lambda2_search=seq(from=1,to=21,by=2)
list_BIC=matrix(0,nrow=length(lambda1_search)*length(lambda2_search)*length(K_search),ncol=4) #matrix of BIC's: lambda1 and lambda2 and K, 49*5 combinations
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search))
list_BIC[,2]=rep(lambda2_search,times=length(lambda1_search)*length(K_search))
list_BIC[,3]=rep(rep(K_search,each=length(lambda2_search)),times=length(lambda1_search))
View(list_BIC)
extract_BIC<-function(row){
X<-EM(y=subs_y,k=list_BIC[row,3],lambda1=list_BIC[row,1],lambda2=list_BIC[row,2],size_factors=size_factors)
print(paste("lambda1 =",list_BIC[row,1],"and lambda2 =",list_BIC[row,2],"and K =",list_BIC[row,3],"pi=",X$pi,"BIC=",X$BIC,"nondisc=",X$nondiscriminatory))
return(X$BIC)
}
for(i in 1:nrow(list_BIC)){list_BIC[i,4]<-extract_BIC(i)}
max_index<-which(list_BIC[,4]==min(list_BIC[,4]))
max_lambda1<-list_BIC[max_index,1]
max_lambda2<-list_BIC[max_index,2]
max_k<-list_BIC[max_index,3]
lambda2_search=seq(from=1,to=1001,by=100)
lambda1_search=seq(from=1,to=1001,by=100)
list_BIC=matrix(0,nrow=length(lambda1_search)*length(lambda2_search)*length(K_search),ncol=4) #matrix of BIC's: lambda1 and lambda2 and K, 49*5 combinations
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search))
list_BIC[,2]=rep(lambda2_search,times=length(lambda1_search)*length(K_search))
list_BIC[,3]=rep(rep(K_search,each=length(lambda2_search)),times=length(lambda1_search))
for(i in 1:nrow(list_BIC)){list_BIC[i,4]<-extract_BIC(i)}
max_index<-which(list_BIC[,4]==min(list_BIC[,4]))
max_lambda1<-list_BIC[max_index,1]
max_lambda2<-list_BIC[max_index,2]
max_k<-list_BIC[max_index,3]
lambda1_search=seq(from=1,to=100001,by=5000)
lambda2_search=seq(from=1,to=100001,by=5000)
list_BIC=matrix(0,nrow=length(lambda1_search)*length(lambda2_search)*length(K_search),ncol=4) #matrix of BIC's: lambda1 and lambda2 and K, 49*5 combinations
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search))
list_BIC[,2]=rep(lambda2_search,times=length(lambda1_search)*length(K_search))
list_BIC[,3]=rep(rep(K_search,each=length(lambda2_search)),times=length(lambda1_search))
for(i in 1:nrow(list_BIC)){list_BIC[i,4]<-extract_BIC(i)}
max_index<-which(list_BIC[,4]==min(list_BIC[,4]))
max_lambda1<-list_BIC[max_index,1]
max_lambda2<-list_BIC[max_index,2]
max_lambda1
max_lambda2
lambda1_search=c(0.01, 0.05, 0.1, 0.2, 0.5, 0.8, 1)
lambda2_search=c(0.01, 0.05, 0.1, 0.2, 0.5, 0.8, 1, 1.5, 2)
tau_search=seq(from=0.1,to=1,by=0.1)
K_search=c(2:6)
length(tau_search)
length(lambda2_search)
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search)*length(tau_search))
lambda1_search=c(0.01, 0.05, 0.1, 0.2, 1, 1.5, 2)
lambda2_search=c(0.01, 0.05, 0.1, 0.2, 1, 1.5, 2)
tau_search=seq(from=0.1,to=1,by=0.1)
K_search=c(2:6)
list_BIC=matrix(0,nrow=length(lambda1_search)*length(lambda2_search)*length(K_search)*length(tau_search),ncol=5) #matrix of BIC's: lambda1 and lambda2 and K, 49*5 combinations
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search)*length(tau_search))
View(list_BIC)
lambda1_search=c(0.01, 0.05, 0.1, 0.2, 1)
lambda2_search=c(0.01, 0.05, 0.1, 0.2, 1)
tau_search=seq(from=0.1,to=1,by=0.1)
K_search=c(2:6)
list_BIC=matrix(0,nrow=length(lambda1_search)*length(lambda2_search)*length(K_search)*length(tau_search),ncol=5) #matrix of BIC's: lambda1 and lambda2 and K, 49*5 combinations
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search)*length(tau_search))
View(list_BIC)
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search)*length(tau_search))
list_BIC[,2]=rep(lambda2_search,times=length(lambda1_search)*length(K_search)*length(tau_search))
list_BIC[,3]=rep(rep(K_search,each=length(lambda2_search)),times=length(lambda1_search)*length(tau_search))
View(list_BIC)
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search)*length(tau_search))
list_BIC[,2]=rep(rep(lambda2_search,each=length(K_search)*length(tau_search)),times=length(tau_search))
list_BIC[,3]=rep(rep(K_search,each=length(tau_search)),times=length(lambda1_search)*length(lambda2_search))
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search)*length(tau_search))
list_BIC[,3]=rep(rep(K_search,each=length(tau_search)),times=length(lambda1_search)*length(lambda2_search))
list_BIC[,4]=rep(tau_search,times=length(lambda1_search)*length(lambda2_search)*length(K_search))
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search)*length(tau_search))
list_BIC[,2]=rep(rep(lambda2_search,each=length(K_search)*length(tau_search)),times=length(lambda1_search))
list_BIC[,3]=rep(rep(K_search,each=length(tau_search)),times=length(lambda1_search)*length(lambda2_search))
list_BIC[,4]=rep(tau_search,times=length(lambda1_search)*length(lambda2_search)*length(K_search))
View(list_BIC)
lambda1_search=c(0.01, 0.05, 0.1, 0.2, 1)
lambda2_search=c(0.01, 0.05, 0.1, 0.2, 1)
tau_search=seq(from=0.1,to=1,by=0.1)
K_search=c(2:6)
list_BIC=matrix(0,nrow=length(lambda1_search)*length(lambda2_search)*length(K_search)*length(tau_search),ncol=5) #matrix of BIC's: lambda1 and lambda2 and K, 49*5 combinations
list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(K_search)*length(tau_search))
list_BIC[,2]=rep(rep(lambda2_search,each=length(K_search)*length(tau_search)),times=length(lambda1_search))
list_BIC[,3]=rep(rep(K_search,each=length(tau_search)),times=length(lambda1_search)*length(lambda2_search))
list_BIC[,4]=rep(tau_search,times=length(lambda1_search)*length(lambda2_search)*length(K_search))
extract_BIC<-function(row){
X<-EM(y=subs_y,k=list_BIC[row,3],lambda1=list_BIC[row,1],lambda2=list_BIC[row,2],tau=list_BIC[row,4],size_factors=size_factors)
print(paste("lambda1 =",list_BIC[row,1],"and lambda2 =",list_BIC[row,2],"and K =",list_BIC[row,3],"and tau =",list_BIC[row,4],"pi=",X$pi,"BIC=",X$BIC,"nondisc=",X$nondiscriminatory))
return(X$BIC)
}
for(i in 1:nrow(list_BIC)){list_BIC[i,5]<-extract_BIC(row=i)}
source("C:/Users/David/Desktop/Research/GitHub/EM/non-simulation EM.R")
for(i in 1:nrow(list_BIC)){list_BIC[i,5]<-extract_BIC(row=i)}
