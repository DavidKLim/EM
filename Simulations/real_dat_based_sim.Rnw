\documentclass{article}

\begin{document}
\SweaveOpts{concordance=TRUE}

<<results=tex, echo=FALSE,results=hide>>=

#Initial data setup

setwd("C:/Users/David/Desktop/Research/EM")

library("stats")
library("data.table")
library("DESeq2")

anno<-read.table("Real Data/Lung Cancer Cell Line/NSCLC_anno.txt",sep="\t",header=TRUE)
dat<-read.table("Real Data/Lung Cancer Cell Line/NSCLC_rsem.genes.exp.count.unnormalized.txt",sep="\t",header=TRUE)
row_names<-toupper(dat[,1])
dat<-round(dat[,-1],digits=0)

# DESeq2 to find size factors

cts<-as.matrix(dat)
rownames(cts)<-row_names

colnames(cts)<-toupper(colnames(cts))
coldata<-anno[,-1]
rownames(coldata)<-toupper(anno[,1])
coldata<-coldata[,c("Adeno.Squamous","Tumor.location")]
dds<-DESeqDataSetFromMatrix(countData = cts,
                            colData = coldata,
                            design = ~ Adeno.Squamous)
DESeq_dds<-DESeq(dds)
size_factors<-sizeFactors(DESeq_dds)

norm_y<-counts(DESeq_dds,normalized=TRUE)

res<-results(DESeq_dds,alpha=0.05)
signif_res<-res[is.na(res$padj)==FALSE,]
signif_res<-signif_res[order(signif_res$padj),]

g=100
signif_res<-signif_res[1:g,]     # subset just g=100 most significant genes



# Initial clean-up of data and pre-filtering to include only genes with >=100 count

dat<-read.table("Real Data/Lung Cancer Cell Line/NSCLC_rsem.genes.exp.count.unnormalized.txt",sep="\t",header=TRUE)
rownames(dat)<-toupper(dat[,1])
dat<-dat[,-1]
signif_dat<-dat[toupper(rownames(signif_res)),]      # Subsetting just the significant genes from DESeq2
y<-round(signif_dat,digits=0)
y<-y[(rowSums(y)>=100),]
y<-y+1

init_y<-y
init_size_factors<-size_factors
source("Pan EM.R")


# Unpenalized run to find initial cluster estimates based on K=2

k=2
n=ncol(y)
g=nrow(y)

X_init<-EM(y=y,k=2,lambda1=0,lambda2=0,tau=0,size_factors=size_factors)
init_coefs<-X_init$coefs              # save init estimates for coefs & pi
init_pi<-X_init$pi


# Mean over clusters, controlled fold change

sim_coefs<-matrix(rep(rowSums(init_coefs)/k,times=k),ncol=k)

fold_change<-1               # 50% nondiscriminatory, 50% discriminatory
nondisc_fold_change<-0.1
tt<-3*g/4
sim_coefs[1:tt,]<-matrix(rep(c(-fold_change,fold_change),times=tt),nrow=tt,byrow=TRUE)+sim_coefs[1:tt,]
sim_coefs[(tt+1):g,]<-matrix(rep(c(-nondisc_fold_change,nondisc_fold_change),times=(g-tt)),nrow=(g-tt),byrow=TRUE)+sim_coefs[(tt+1):g,]


# SIMULATIONS
sim=100
choose_k<-rep(0,times=sim)

# Function to simulate data

simulate_data=function(n,k,g,init_pi,b){
  y<-matrix(rep(0,times=g*n),nrow=g)
  z = rmultinom(n,1,init_pi)
  for(j in 1:g){
    for(c in 1:k){
      y[j,z[c,]==1] = rpois(sum(z[c,]==1), lambda = exp(b[j,c]))
    }
  }
  result<-list(y=y,z=z)
  return(result)
}

for(ii in 1:sim){
  
  # Simulate data based on initial estimates/estimate size factors
  sim.dat<-simulate_data(n=n,k=k,g=g,init_pi=init_pi,b=sim_coefs)
  y<-sim.dat$y+1
  z<-sim.dat$z
  true_clusters<-rep(0,times=n)
  for(i in 1:n){
    true_clusters[i]<-which(z[,i]==1)
  }
  row_names<-paste("gene",seq(g))
  col_names<-paste("subj",seq(n))
  cts<-as.matrix(y)
  rownames(cts)<-row_names
  colnames(cts)<-col_names
  coldata<-matrix(paste("cl",true_clusters,sep=""),nrow=n)
  rownames(coldata)<-colnames(cts)
  colnames(coldata)<-"cluster"
  dds<-DESeqDataSetFromMatrix(countData = cts,
                              colData = coldata,
                              design = ~ 1)
  DESeq_dds<-DESeq(dds)
  size_factors<-estimateSizeFactors(dds)$sizeFactor
  norm_y<-counts(DESeq_dds,normalized=TRUE)
  
  # Simulation order selection based on unpenalized EM #
  
  K_search=c(2:8)
  list_BIC=matrix(0,nrow=length(K_search),ncol=2)
  list_BIC[,1]=K_search
  
  print(paste("Iteration",ii,":"))
  for(aa in 1:nrow(list_BIC)){
    list_BIC[aa,2]<-EM(y=y,k=list_BIC[aa,1],lambda1=0,lambda2=0,tau=0,size_factors=size_factors)$BIC   # no penalty Pan
    print(list_BIC[aa,])
  }
  
  max_k=list_BIC[which(list_BIC[,2]==min(list_BIC[,2])),1]
  choose_k[ii]<-max_k
}

@

<<echo=FALSE,print=FALSE,results=tex>>=
table(choose_k)    # see how simulations chose each cluster
max_k=as.numeric(which.max(table(choose_k))+1)
@

The optimal number of clusters K is set as the most frequently found K from the 100 simulations tabulated above. It is found by using the BIC criterion after running the unpenalized EM algorithm on K spanning from 2 to 8.


<<results=tex, echo=FALSE,results=hide>>=
# Grid search on last simulated y

lambda1_search=seq(from=0.1,to=2,by=0.1)
lambda2_search=seq(from=0.1,to=2,by=0.1)
tau_search=9999

list_BIC=matrix(0,nrow=length(lambda1_search)*length(lambda2_search)*length(tau_search),ncol=4) # matrix of BIC's: one for each combination of penalty params 

list_BIC[,1]=rep(lambda1_search,each=length(lambda2_search)*length(tau_search))
list_BIC[,2]=rep(rep(lambda2_search,each=length(tau_search)),times=length(lambda1_search))
list_BIC[,3]=rep(tau_search,times=length(lambda1_search)*length(lambda2_search))

for(aa in 1:nrow(list_BIC)){
  list_BIC[aa,4]<-EM(y=y,k=max_k,tau=list_BIC[aa,3],lambda1=list_BIC[aa,1],lambda2=list_BIC[aa,2],size_factors=size_factors)$BIC
  print(list_BIC[aa,])
}

max_index<-which(list_BIC[,4]==min(list_BIC[,4]))
max_tau<-list_BIC[max_index,3]
max_lambda1<-list_BIC[max_index,1]
max_lambda2<-list_BIC[max_index,2]
@


<<>>=
print(paste("tau=",unique(max_tau)))
print(paste("lambda1=",unique(max_lambda1)))
print(paste("lambda2=",unique(max_lambda2)))
if(length(max_index)>1){
  warning("more than one max index")
  max_index<-max_index[1]
  max_tau<-list_BIC[max_index,3]
  max_lambda1<-list_BIC[max_index,1]
  max_lambda2<-list_BIC[max_index,2]
}

@

# Final run based on optimal tuning parameters

<<>>=
X_final<-EM(y=y,k=max_k,tau=max_tau,lambda1=max_lambda1,lambda2=max_lambda2,size_factors=size_factors)
head(X_final$coefs)
print(X_final$pi)
print(mean(X_final$nondiscriminatory))
print(X_final$final_clusters)
@



\end{document}